
##! Functions for peering and various messaging patterns.

%%{
#include "broker/Manager.h"
#include "logging/Manager.h"
#include <set>
#include <string>

static bool is_string_set(const BroType* type)
	{
	if ( ! type->IsSet() )
		return false;

	auto index_types = type->AsSetType()->IndexTypes();

	if ( index_types->length() != 1 )
		return false;

	return (*index_types)[0]->Tag() == TYPE_STRING;
	}

std::set<std::string> val_to_topic_set(Val* val)
	{
	std::set<std::string> rval;

	if ( val->Type()->Tag() == TYPE_STRING )
		rval.emplace(val->AsString()->CheckString());
	else
		{
		const PDict(TableEntryVal)* tbl = val->AsTable();

		if ( tbl->Length() == 0 )
			return rval;

		IterCookie* c = tbl->InitForIteration();
		HashKey* k;

		while ( tbl->NextEntry(k, c) )
			{
			auto index = val->AsTableVal()->RecoverIndex(k);
			rval.emplace(index->Index(0)->AsString()->CheckString());
			Unref(index);
			delete k;
			}
		}

	return rval;
	}

static bool publish_event_args(val_list& args, const BroString* topic,
                               Frame* frame)
	{
	bro_broker::Manager::ScriptScopeGuard ssg;
	auto rval = false;

	if ( args[0]->Type()->Tag() == TYPE_RECORD )
		rval = broker_mgr->PublishEvent(topic->CheckString(),
		                                args[0]->AsRecordVal());
	else
		{
		auto ev = broker_mgr->MakeEvent(&args, frame);
		rval = broker_mgr->PublishEvent(topic->CheckString(), ev);
		Unref(ev);
		}

	return rval;
	}

%%}

module Broker;

type Broker::Event: record;

## Create a data structure that may be used to send a remote event via
## :bro:see:`Broker::publish`.
##
## args: an event, followed by a list of argument values that may be used
##       to call it.
##
## Returns: opaque communication data that may be used to send a remote
##          event.
function Broker::make_event%(...%): Broker::Event
	%{
	bro_broker::Manager::ScriptScopeGuard ssg;
	auto rval = broker_mgr->MakeEvent(@ARGS@, frame);
	return rval;
	%}

## Publishes an event at a given topic.
##
## topic: a topic associated with the event message.
##
## args: Either the event arguments as already made by
##       :bro:see:`Broker::make_event` or the argument list to pass along
##       to it.
##
## Returns: true if the message is sent.
function Broker::publish%(topic: string, ...%): bool
	%{
	val_list* bif_args = @ARGS@;
	val_list args(bif_args->length() - 1);

	for ( auto i = 1; i < bif_args->length(); ++i )
		args.append((*bif_args)[i]);

	auto rval = publish_event_args(args, topic->AsString(), frame);
	return new Val(rval, TYPE_BOOL);
	%}

function Broker::__flush_logs%(%): count
	%{
	auto rval = broker_mgr->FlushLogBuffers();
	return new Val(static_cast<uint64>(rval), TYPE_COUNT);
	%}

function Broker::__publish_id%(topic: string, id: string%): bool
	%{
	bro_broker::Manager::ScriptScopeGuard ssg;
	auto rval = broker_mgr->PublishIdentifier(topic->CheckString(),
	                                          id->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}

function Broker::__auto_publish%(topic: string, ev: any%): bool
	%{
	bro_broker::Manager::ScriptScopeGuard ssg;
	auto rval = broker_mgr->AutoPublishEvent(topic->CheckString(), ev);
	return new Val(rval, TYPE_BOOL);
	%}

function Broker::__auto_unpublish%(topic: string, ev: any%): bool
	%{
	bro_broker::Manager::ScriptScopeGuard ssg;
	auto rval = broker_mgr->AutoUnpublishEvent(topic->CheckString(), ev);
	return new Val(rval, TYPE_BOOL);
	%}

function Broker::__subscribe%(topic_prefix: string%): bool
	%{
	bro_broker::Manager::ScriptScopeGuard ssg;
	auto rval = broker_mgr->Subscribe(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}

function Broker::__forward%(topic_prefix: string%): bool
	%{
	bro_broker::Manager::ScriptScopeGuard ssg;
	auto rval = broker_mgr->Forward(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}

function Broker::__unsubscribe%(topic_prefix: string%): bool
	%{
	bro_broker::Manager::ScriptScopeGuard ssg;
	auto rval = broker_mgr->Unsubscribe(topic_prefix->CheckString());
	return new Val(rval, TYPE_BOOL);
	%}

module Cluster;

type Cluster::Pool: record;

## Publishes an event to a node within a pool according to Round-Robin
## distribution strategy.
##
## pool: the pool of nodes that are eligible to receive the event.
##
## key: an arbitrary string to identify the purpose for which you're
##      distributing the event.  e.g. consider using namespacing of your
##      script like "Intel::cluster_rr_key".
##
## args: Either the event arguments as already made by
##       :bro:see:`Broker::make_event` or the argument list to pass along
##       to it.
##
## Returns: true if the message is sent.
function Cluster::publish_rr%(pool: Pool, key: string, ...%): bool
	%{
	static Func* topic_func = 0;

	if ( ! topic_func )
		topic_func = global_scope()->Lookup("Cluster::rr_topic")->ID_Val()->AsFunc();

	val_list vl(2);
	vl.append(pool->Ref());
	vl.append(key->Ref());
	auto topic = topic_func->Call(&vl);

	if ( ! topic->AsString()->Len() )
		{
		Unref(topic);
		return new Val(false, TYPE_BOOL);
		}

	val_list* bif_args = @ARGS@;
	val_list args(bif_args->length() - 2);

	for ( auto i = 2; i < bif_args->length(); ++i )
		args.append((*bif_args)[i]);

	auto rval = publish_event_args(args, topic->AsString(), frame);
	Unref(topic);
	return new Val(rval, TYPE_BOOL);
	%}


## Publishes an event to a node within a pool according to Rendezvous
## (Highest Random Weight) hashing strategy.
##
## pool: the pool of nodes that are eligible to receive the event.
##
## key: data used for input to the hashing function that will uniformly
##      distribute keys among available nodes.
##
## args: Either the event arguments as already made by
##       :bro:see:`Broker::make_event` or the argument list to pass along
##       to it.
##
## Returns: true if the message is sent.
function Cluster::publish_hrw%(pool: Pool, key: any, ...%): bool
	%{
	static Func* topic_func = 0;

	if ( ! topic_func )
		topic_func = global_scope()->Lookup("Cluster::hrw_topic")->ID_Val()->AsFunc();

	val_list vl(2);
	vl.append(pool->Ref());
	vl.append(key->Ref());
	auto topic = topic_func->Call(&vl);

	if ( ! topic->AsString()->Len() )
		{
		Unref(topic);
		return new Val(false, TYPE_BOOL);
		}

	val_list* bif_args = @ARGS@;
	val_list args(bif_args->length() - 2);

	for ( auto i = 2; i < bif_args->length(); ++i )
		args.append((*bif_args)[i]);

	auto rval = publish_event_args(args, topic->AsString(), frame);
	Unref(topic);
	return new Val(rval, TYPE_BOOL);
	%}
